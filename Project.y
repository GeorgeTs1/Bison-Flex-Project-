%{
#include <stdio.h>
#include<stdlib.h>
#include<string.h>

int yylex();
int yyerror(char *s);
extern int linenum;

void check_var_names(char* str1,int len1,char* str2,int len2);

%}

%token PROGRAM STRING NEW_LINE FUNCTION F_PARAMETERS F_DECLARATIONS
%token END_FUNCTION STARTMAIN ASSIGNMENT WHILE_COMMAND
%token END_WHILE FOR_COMMAND END_FOR IF_COMMAND ELSEIF_COMMAND ELSE
%token ENDIF SWITCH_COMMAND CASE_COMMAND DEFAULT ENDSWITCH
%token PRINT_COMMAND BREAK_COMMAND ENDMAIN OTHER RETURN_VAR
%token TAB SPACE VARS_CHAR VARS_INTEGER SEMICOLON STRING2
%token STRUCT ENDSTRUCT TYPE_STRUCT 

%type <prog_name>    STRING
%type <variables>    STRING2
%type <variables>    F_PARAMETERS
%type <prog_name>    F_DECLARATIONS
%type <variables>    ASSIGNMENT
%type <commands>     WHILE_COMMAND
%type <commands>     FOR_COMMAND
%type <commands>     IF_COMMAND
%type <commands>     ELSEIF_COMMAND
%type <commands>     SWITCH_COMMAND
%type <commands>     CASE_COMMAND 
%type <commands>     PRINT_COMMAND		

%union{
    
    char function_name[200];
    char prog_name[200];
    char variables[200];
    char assignment[150];
    int number;
    char commands[150];
	
}

%%



prog:
  main
;


main:

    program
;


program:
	PROGRAM STRING NEW_LINE  function STARTMAIN NEW_LINE
		{
			printf("\nGj man!!");
		}
	| PROGRAM STRING NEW_LINE STARTMAIN NEW_LINE
		{
			printf("\nRight input also");
		} 
	
	| 	{
			printf("\nYou didin't type anything :("); 
		}	
	| function
		
		{
			printf("\nProgram should start with PROGRAM prog_name");
		}
	
	|for   
                {
			printf("\nI LOVE FOR");
		}

	|while
		{
			printf("\nI LOVE WHILE ALSO");
		}
	|switch
	

	|print 
		{	
			printf("\nPrint is ok also");
		}

	|struct {
			printf("\nStruct works perfectly");
		}			
		
	|STRING

		{
			printf("\nJust testing strings");
		}
	
	| OTHER	
		{
			printf("\nGTPK input");
		}
;	

	



function:


	 FUNCTION STRING F_PARAMETERS NEW_LINE VARS_CHAR  STRING
		{
			printf("\nI love you\n");
		} 
	
	| FUNCTION STRING F_PARAMETERS NEW_LINE ASSIGNMENT NEW_LINE RETURN_VAR NEW_LINE END_FUNCTION NEW_LINE
		
		{
			printf("RIGHT INPUT");
		}
		
	| 
		{	
			printf("\nGTPK input");		
		}
	|OTHER      
                {
			printf("\nGTPK input");
		}
;


for:
	  FOR_COMMAND NEW_LINE ASSIGNMENT NEW_LINE ASSIGNMENT NEW_LINE ASSIGNMENT NEW_LINE END_FOR
	
	| FOR_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB  ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB END_FOR
	
	| FOR_COMMAND NEW_LINE ASSIGNMENT NEW_LINE ASSIGNMENT NEW_LINE END_FOR 
	
	| FOR_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB END_FOR 
	
	| FOR_COMMAND NEW_LINE ASSIGNMENT NEW_LINE END_FOR
	
	| FOR_COMMAND NEW_LINE TAB  ASSIGNMENT NEW_LINE TAB END_FOR
	
	| FOR_COMMAND NEW_LINE ASSIGNMENT NEW_LINE ASSIGNMENT NEW_LINE ASSIGNMENT NEW_LINE TAB FOR_COMMAND NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB  END_FOR NEW_LINE END_FOR   
	
	| FOR_COMMAND NEW_LINE ASSIGNMENT NEW_LINE ASSIGNMENT NEW_LINE ASSIGNMENT NEW_LINE TAB FOR_COMMAND NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB END_FOR NEW_LINE END_FOR

	| FOR_COMMAND NEW_LINE ASSIGNMENT NEW_LINE  ASSIGNMENT NEW_LINE ASSIGNMENT NEW_LINE TAB FOR_COMMAND NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB END_FOR NEW_LINE END_FOR
	
	| FOR_COMMAND NEW_LINE ASSIGNMENT NEW_LINE ASSIGNMENT NEW_LINE ASSIGNMENT NEW_LINE TAB FOR_COMMAND NEW_LINE TAB END_FOR NEW_LINE END_FOR
	
	| FOR_COMMAND NEW_LINE ASSIGNMENT NEW_LINE  ASSIGNMENT NEW_LINE TAB FOR_COMMAND NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB END_FOR NEW_LINE END_FOR 
	
	| FOR_COMMAND NEW_LINE ASSIGNMENT NEW_LINE  ASSIGNMENT NEW_LINE TAB FOR_COMMAND NEW_LINE TAB TAB  ASSIGNMENT NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB END_FOR NEW_LINE END_FOR 
	
	| FOR_COMMAND NEW_LINE ASSIGNMENT NEW_LINE  ASSIGNMENT NEW_LINE TAB FOR_COMMAND NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB END_FOR NEW_LINE END_FOR
	
	|FOR_COMMAND NEW_LINE ASSIGNMENT NEW_LINE  ASSIGNMENT NEW_LINE TAB FOR_COMMAND NEW_LINE TAB END_FOR NEW_LINE END_FOR

	| FOR_COMMAND NEW_LINE ASSIGNMENT NEW_LINE TAB FOR_COMMAND NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB END_FOR NEW_LINE END_FOR
	
	| FOR_COMMAND NEW_LINE ASSIGNMENT NEW_LINE TAB FOR_COMMAND NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB END_FOR NEW_LINE END_FOR 

	| FOR_COMMAND NEW_LINE ASSIGNMENT NEW_LINE TAB FOR_COMMAND NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB END_FOR NEW_LINE END_FOR
	
	| FOR_COMMAND NEW_LINE ASSIGNMENT NEW_LINE TAB FOR_COMMAND NEW_LINE TAB END_FOR NEW_LINE END_FOR

	| FOR_COMMAND NEW_LINE TAB FOR_COMMAND NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB END_FOR NEW_LINE END_FOR  

	| FOR_COMMAND NEW_LINE TAB FOR_COMMAND NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB END_FOR NEW_LINE END_FOR

	| FOR_COMMAND NEW_LINE TAB FOR_COMMAND NEW_LINE TAB TAB ASSIGNMENT NEW_LINE TAB END_FOR NEW_LINE END_FOR

	| FOR_COMMAND NEW_LINE TAB FOR_COMMAND NEW_LINE TAB END_FOR NEW_LINE END_FOR	
	
	| FOR_COMMAND NEW_LINE TAB NEW_LINE for NEW_LINE NEW_LINE TAB END_FOR

	| FOR_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB NEW_LINE TAB for NEW_LINE NEW_LINE  TAB END_FOR

	| FOR_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB NEW_LINE TAB  for NEW_LINE NEW_LINE TAB END_FOR

	| FOR_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB NEW_LINE TAB  for NEW_LINE NEW_LINE TAB END_FOR

	| FOR_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE NEW_LINE TAB while NEW_LINE NEW_LINE TAB END_FOR

	| FOR_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE NEW_LINE TAB while NEW_LINE NEW_LINE TAB END_FOR

	| FOR_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE NEW_LINE TAB while NEW_LINE NEW_LINE TAB END_FOR 
;	


while:
	

         WHILE_COMMAND NEW_LINE ASSIGNMENT NEW_LINE ASSIGNMENT NEW_LINE ASSIGNMENT NEW_LINE END_WHILE
	{
		printf("WHILE IS MY WIFE\n");
	}
	
	| WHILE_COMMAND NEW_LINE ASSIGNMENT NEW_LINE ASSIGNMENT  NEW_LINE  END_WHILE
	
	{
		printf("\nFOR THE SAKE OF HUMANITY WORK PLS");
	}

	|WHILE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB  END_WHILE

	|WHILE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB END_WHILE
	
	|WHILE_COMMAND NEW_LINE ASSIGNMENT NEW_LINE  END_WHILE

	|WHILE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB END_WHILE

	|WHILE_COMMAND NEW_LINE TAB for NEW_LINE  END_WHILE
	
	|WHILE_COMMAND NEW_LINE TAB for NEW_LINE TAB END_WHILE

	|WHILE_COMMAND NEW_LINE ASSIGNMENT NEW_LINE ASSIGNMENT NEW_LINE ASSIGNMENT NEW_LINE  TAB for NEW_LINE END_WHILE
	
	|WHILE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB for NEW_LINE TAB END_WHILE
	
	|WHILE_COMMAND NEW_LINE ASSIGNMENT NEW_LINE ASSIGNMENT NEW_LINE  TAB for NEW_LINE END_WHILE
	
	|WHILE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB for NEW_LINE TAB END_WHILE 

	|WHILE_COMMAND NEW_LINE TAB  while NEW_LINE END_WHILE

	|WHILE_COMMAND NEW_LINE TAB switch NEW_LINE END_WHILE
	 
	|WHILE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE NEW_LINE TAB for NEW_LINE NEW_LINE TAB  END_WHILE
	
	|WHILE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE NEW_LINE TAB for NEW_LINE NEW_LINE TAB  END_WHILE 
	
	|WHILE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE NEW_LINE TAB for NEW_LINE NEW_LINE TAB END_WHILE
	
	|WHILE_COMMAND NEW_LINE TAB while NEW_LINE NEW_LINE TAB  END_WHILE

	|WHILE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE NEW_LINE TAB while NEW_LINE NEW_LINE TAB  END_WHILE
	
	|WHILE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE NEW_LINE TAB while NEW_LINE NEW_LINE TAB  END_WHILE
	
	|WHILE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE NEW_LINE TAB while NEW_LINE NEW_LINE TAB END_WHILE 
;	

switch:
       
      SWITCH_COMMAND NEW_LINE  case NEW_LINE ENDSWITCH NEW_LINE
	{
	   printf("\nSwitch-Case-Default i love you guys");
	} 

      |SWITCH_COMMAND NEW_LINE case NEW_LINE  
	{
	   printf("\nSwitch works fine!!");
	}	
	

;

case:
	
	CASE_COMMAND NEW_LINE TAB ASSIGNMENT 
	
	|CASE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT
	
        |CASE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT 

	|CASE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE
	
	|CASE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE

	|CASE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE 
	
	|CASE_COMMAND NEW_LINE TAB for NEW_LINE case 
	
	|CASE_COMMAND NEW_LINE TAB while NEW_LINE case 
		
	|CASE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB for NEW_LINE case 

        |CASE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB while NEW_LINE case 

	|CASE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB  for NEW_LINE case
	
	|CASE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB  while NEW_LINE case

	|CASE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB  for NEW_LINE case

	|CASE_COMMAND NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB  while NEW_LINE case
 
	|CASE_COMMAND NEW_LINE  case NEW_LINE case NEW_LINE default

	|CASE_COMMAND NEW_LINE  case NEW_LINE  default

	|CASE_COMMAND NEW_LINE  case  NEW_LINE case

	|CASE_COMMAND NEW_LINE  case 

	|ENDSWITCH

	|default
;

default:

	DEFAULT NEW_LINE TAB for NEW_LINE
	
	|DEFAULT NEW_LINE TAB while NEW_LINE

	|DEFAULT NEW_LINE TAB ASSIGNMENT NEW_LINE   

	|DEFAULT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB  for NEW_LINE  

	|DEFAULT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB while NEW_LINE

	|DEFAULT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE 
	
	|DEFAULT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB  for NEW_LINE

	|DEFAULT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB while NEW_LINE

	|DEFAULT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE
	
	|DEFAULT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB for NEW_LINE

	|DEFAULT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB ASSIGNMENT NEW_LINE TAB while NEW_LINE
	
;
	

print:

	PRINT_COMMAND NEW_LINE
	

;


declarations_char:

	 VARS_CHAR STRING  

;


declarations_int:

	VARS_INTEGER STRING 
;
	

struct:
	STRUCT  NEW_LINE declarations_char NEW_LINE declarations_int NEW_LINE ENDSTRUCT
	
	|TYPE_STRUCT STRING NEW_LINE declarations_char NEW_LINE declarations_int NEW_LINE STRING ENDSTRUCT

;



%%

int yyerror(char *s)
{
	printf("Syntax Error on line %d\n", linenum);
	return 0;
}

void  check_var_names(char* str1,int len1,char* str2,int len2)
{
    char* name1=str1;
    char* name2=str2;
    int k=0;
    char* token1;
    char* token2;
    int flag=0;
    const char coma[2] = ",";
     
 		
        for(int i=8; i<len1-1; i++)
	{    
	     
	     name1[k]=str1[i];
	     k++;
	}

	name1[k]='\0';
	
	k=0;
	
        for(int i=11; i<len2-1; i++)
	{
	  
	     name2[k] = str2[i];
	     k++;
	}
	
	name2[k]='\0';

	printf("%s\t%s\n",name1,name2);
	printf("%d\t%d\n",strlen(name1),strlen(name2));

	token1 = strtok(name1,coma);
	token2 = strtok(name2,coma);

	while( (token2!=NULL) )
		{  
	           //printf("%s\n",token1);
	           printf("%s\n",token2);	 
               
                   //token1 = strtok(NULL,coma);
	           token2 = strtok(NULL,coma);	     
				    
		}

	

  
 
}	



	

int main()
{

system("clear");
yyparse();

return 0;

}

